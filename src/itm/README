	Finding Your Way Around the src/itm/ Subsystem

The intermediate subsystem forms the bridge between the parsing and emission
subsystems.

Its features include:

- ast.h: Providing an interface for reading and writing the intermediate form abstract
  syntax tree for the parsing and emission subsystems respectively. These
  functions are provided by ast.c.

- analyze.h: Analyse the intermediate form abstract syntax tree. Analysations include:

	- A_USED: Usage analysis. Checks how often the instruction is used by
	  other instructions, and tags each instruction with a tt_used.
	- A_LIFETIME: Lifetime analysis. Checks when an instruction is used
	  last, and tags the instruction where it ends with tt_endlife.
	- A_PHIABLE: Tests whether itm_alloca instructions are only used as the
	  destination of an itm_store or the source of an itm_load, and is thus
	  eligable for phi-node optimisation.

  Analysations are only performed by the optimiser and the assembly emitter.

- opt.h: Optimise the intermediate source tree. Optimisations include:

	- o_phiable: Attempts to convert an alloca/load/store system into a
	  phi node system.
	- o_cfld: Folds constants where possible ("1 + 2" => "3").
	- o_prune: Removes all unused blocks (blocks without predecessors).
	- o_uncsplit: Converts conditional jumps to unconditional jumps where
	  jump conditions are constant.

- tag.h: Provides data structures used to tag SSA-nodes.
