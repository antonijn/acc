	Finding Your Way Around the src/emit/ Subsystem

The emission subsystem is the part where the actual generation occurs. It takes
input from the intermediate subsystem, analyses it further as required
(unimplemented as of yet), performs register allocation analysis (unimplemented
as of yet), and starts writing the target assembly.

The file /src/emit/asm.c provides an interface for writing assembly code.
emit_i() and emit_sdi() are among the most important functions in the interface.
They are used to write a general instruction to a file, and write a source-
destination instruction to a file respectively. The latter is important in the
distinction between AT&T and Intel assembly for the x86 architectures, the
former writing the source first, the latter writing the destination first.

It also provides a generic register allocation interface (regalloc()), which can
be used for any architecture. The register allocation process consists of:

- A target-specific "restricter", which can force intermediate instructions into
  a specific register/memory location using the itm_mov instruction, and can
  also clobb registers by binding an itm_nop to a specific register after an
  intermediate instruction. The restricters may only insert itm_mov and itm_nop
  instructions.
  
  Example: return values. On x86 for example, integer and pointer return values
  are generally returned in the accumulator, so you'd insert an itm_mov with a
  tt_reg/tt_loc tag before the itm_ret instruction. Similarly, parameters would
  be bound to a specific register/memory location.

- A target-independent register/memory allocator, which analyses the lifetime
  of each intermediate instruction and assigns them to memory locations or
  registers in the (hopefully) fastest and most space preserving way. It may
  also insert itm_mov instructions to move an instruction about throughout its
  lifetime.


Emitters are generally specific to a specific family of architectures, since
they are similar enough to generate the same code, albeit with a different set
of registers for each CPU, and a slightly different intstruction set for each
CPU. All x86 emitters are merged into one for example (the 8086, i386, i686 and
x86_64 architectures).
