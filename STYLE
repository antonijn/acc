	acc Code Style

Of course you may fork this software, but in order for pull requests to be 
merged into this repository, your code must adhere to a few style rules. These 
rules ensure code is portable and readable. I'm the boss in this repository so 
I will be strict.


	1. Formatting
	1.1. Indentation and line length

Indenting is done through tab characters, assuming an eight-space tab. Make 
efforts not to exceed a line length of 80 characters. Do this by refactoring the 
code, or by splitting a certain line in two. Usually these long lines will be 
function calls. Split them at parameter borders, and if possible, group certain 
parameters together. For example a certain long line:

	call_a_function_with_a_long_name((struct foo *)bar, (struct foo *)qux);

Becomes (assuming the line length limit was exceeded):

	call_a_function_with_a_long_name((struct foo *)bar,
		(struct foo *)qux);

Or, depending on personal preference:

	call_a_function_with_a_long_name(
		(struct foo *)bar, (struct foo *)qux);

To ensure that it's obvious that a function call is still being made, the 
opening parenthesis is put on the line of the function identifier.

If the line in question is part of a condition, split at && and ||, keeping && 
or || at the end of the line. Align with spaces.

	if (some_crazy_long_condition &&
	    some_other_crazy_long_condition)
		// ...

Indentation can also be decreased substantially sometimes by using early 
returns:

	
	// preferred
	void foo(void)
	{
		if (!cond)
			return;
		
		// main body has only one level of indentation
	}
	
	// undesirable
	void foo(void)
	{
		if (cond) {
			// main body has two levels of indentation
		}
	}

If line length exceeds 80 characters but little or no useful information is 
lost, don't sacrifice readability, and exceed the line length limit.

Indentation is done according to K&R rules: indent inside a function like so:

	void foo(void)
	{
		// ...
	}

Inside if, else, while, do-while and for statements, also indent:

	if (foo) {
		// ...
	} else {
		// ...
	}

Also indent standalone compound statements, but obviously don't indent them if 
they're already part of an if, else, while, do-while or for statement.

	// ...
	{
		// ...
	}
	// ...


	1.2. Brace placement

Braces are placed as placed by K&R: the opening brace is put on the same line 
as the introductory statement, and put the closing brace on a new line.

	// ...
	for (i = 0; str[i]; ++i) {
		// ...
	}
	// ...

If there is no previous statement, or the previous statement isn't a 
control-flow statement, the brace is put on a new line.

	void foo(void)
	{
		// ...
		bar();
		{
			// ...
		}
		// ...
	}

In case of an else block, the closing brace of the previous if statement is put 
on the same line as the else block. Similarly, the while keyword is also put on 
the closing brace of the do block.

	// ...
	if (foo) {
		// ...
	} else {
		// ...
	}
	// ...
	do {
		// ...
	} while (bar);
	// ...

Don't make use of compound statements if a single statement suffices. Put the 
statement on a new line. For example:

	if (foo)
		bar();
	else
		qux();

Not:

	if (foo) {
		bar();
	} else {
		qux();
	}

However, be consistent throughout if-else chains.

	if (foo) {
		bar();
		qux();
	} else {
		quux();
	}

If this happens in do-while loops, the while keyword is put on a new line like
so:

	do
		foo();
	while (bar);

The semicolon for an empty statement is also put on a newline, so behaviour 
doesn't get obscured.

	if (foo)
		;


	1.3. Spaces
	
Don't use spaces after function calls or declarations:

	foo(boop, bap, beep);

Don't use spaces inside of parentheses:

	// good!
	foo(bar);
	// bad:
	// foo( bar );

Use a space after:

	if, for, while, switch, case

But not after "sizeof".


	1.4. Parentheses

Please, please, please, please don't use parentheses around return values. The 
return keyword is not a function, don't make it seem like one...

	/* AWFUL!!! */
	return(0);

And *do* use parentheses around the type inside a sizeof expression.

	size_t s = sizeof(int);


	2. Naming

Try to make your identifiers and tags short, not overly verbose. Sometimes 
functions get quite specialised. In such an event, verbose identifiers 
can't be avoided unfortunately enough. Split words with 
underscores.

Don't force a short function name where a longer one is more natural. A 
function that converts an intermediate block to a string should be called 
"itm_block_to_string", not "itmblktostr".

Function and variable identifiers and type names are lowercase.

	struct struct_name;
	
	void function(struct struct_name *arg, int param);

Enumerators and macro names are uppercase. Inclusion guards are composed of the 
header name in capitals followed by "_H". Prefix enumerators with some value 
related to the enumeration tag, followed by an underscore to avoid name 
collisions.

	#ifndef HEADER_H
	#define HEADER_H

	enum myenum {
		ME_ENUMERATOR,
		ME_NEXT
	};
	
	#endif

Please don't put those silly "/* HEADER_H */" comments after the final endif, 
everyone knows how include guards work.


	3. Comments

Prefer single-line comments, but use multi-line syntax for elaborate comments.

	// good!
	/* bad */

If your comments span multiple lines, make a line of asterisks underneath the 
first asterisk. Leave the first line empty.

	/*
	 * Lorem ipsum dolor sit amet, consectetur adipisicing elit,
	 * sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	 */

Use comments sparsely in code. If you write your code well and refactor 
properly, code doesn't need explaining. Sometimes it's useful to comment on the 
functionality, implementation details and dos and don'ts of the function before 
the declaration. Don't hesitate to do so.

Also use "TODO" comments to declare unimplemented features or possible bugs:

	// TODO: is this behavior well-defined?
	
	// TODO: implement function


	4. General practices
	4.1. Macros

Avoid macro definitions if you can, only use them as inclusion guards. Use 
functions if you can, and use declared constants rather than defined ones.


	4.2. Assertions

Use the assert function excessively, with the "better safe than sorry" idea. 
Use them to ensure important parameters aren't NULL at the start of functions, 
and some used fields. Anything to check function input is valid.

For easy debugging, make the assertions verbose. To check if a parameter is not
NULL, use the following:

	assert(param != NULL);

Rather than:

	assert(param);


	4.3. Integral and pointer types as conditions

Outside of assertions, make use of the fact that integers and pointers are 
conditions themselves. For example, to check if a certain pointer "foo" isn't 
NULL:

	void *foo = bar();
	if (!foo) {
		fprintf(stderr, "bar() failed\n");
		abort();
	}


	4.4. Header inclusion order

The header inclusion order is standard library headers first, followed by a 
blank line, followed by project headers:

	#include <stdio.h>
	#include <stdlib.h>
	#include <stdarg.h>
	#include <assert.h>
	
	#include <proj/options.h>
	#include <proj/feature.h>


	4.5. Storage class specifiers

Use the static storage class excessively for global symbols, to avoid global 
name collisions and allow better, more thorough optimisation.


	4.6. goto

The goto keyword is dangerous. Use it sparsely but wisely. Its usage is not 
forbidden, but please don't use it to a headache-inducing level.

Use it to prepare a return value and clean up a function, for example, or to 
jump out of a function on errors.


	4.7. The comma operator

It exists. Just wanted to remind you of that.


	4.8. typedef

As a general rule: use it only if you have a very good reason: if it improves
scalability, such as using a general globally easily changable integer regid_t
type for registers, or improves maintainability, such as using it_t for
iterators instead of the more error-prone void pointer (in case of the iterator
type this could also be done using a pointer to some opaque struct, but
iterators are used frequently enough to require a short-and-sweet name).

Some people like declaring types like this:

	typedef union {
		struct alpha a;
		struct beta b;
	} someunion_t;
	
	someunion_t instance;

I don't. Don't be too lazy to prefix your type tag with the type class. Be a 
man. Or a woman. Or both. Or neither. Just don't be a typedef maniac.

	union someunion {
		struct alpha a;
		struct beta b;
	};
	
	union someunion instance;

Now, some people think function pointer syntax is confusing. They have yet to 
reach C-nirvana. For the sake of the enlightened among us, don't typedef 
function pointers.

	void (*fptr_instance)(int param, int other);


	5. Portability
	5.1. Use of C

To ensure best portability, this software is written in ISO C99,
without any GNU or C11 extensions.

Be careful with question marks, they are used for trigraphs. Escape the 
question mark in string literals when necessary.


	5.2. Libraries

Only use the functions defined by the ISO C99 standard library, unless any
other platform-independent libraries are linked explicitly. Don't use any glibc 
extensions (i.e. fmemopen) or extensions to the standard library (i.e. snprintf 
and alloca), unless this functionality can be checked for, and an 
implementation using an alternate function is provided.

Extensions using POSIX functions like "popen" are allowed (or even "_popen" as 
the windows equivalent), if proper care is taken to ensure these functions are 
available (i.e. checking for "__unix__" or "WIN32"), and they only extend 
existing functionality, so that the software doesn't break on platforms where 
these extensions aren't available.


	5.3. Assumptions

Any behaviour deemed undefined by ISO C99 is forbidden. No assumptions can be
made with the "it works on my machine" rationale.

Don't assume the size of types for variables. You cannot assume that a char is 
one byte in size. This is important in malloc/calloc calls:

	// good!
	char *str = calloc(len, sizeof(char));
	int *ints = malloc(intcount * sizeof(int));

	// bad!!!
	// char *str = calloc(len, 1);
	// int *ints = malloc(intcount * 4);

Make use of <stdint.h> if you need to use fixed-width integers. Print/scan them
using the format specifiers specified in <inttypes.h>.
